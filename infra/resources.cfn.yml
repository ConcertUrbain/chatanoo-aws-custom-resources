AWSTemplateFormatVersion: '2010-09-09'
Description: Chatanoo Custom Resources

Metadata: {}

Parameters:
  ProjectName:
    Type: String
  DeploymentBucket:
    Description: Bucket where the custom resouces sources code is stored
    Type: String
    Default: chatanoo-deployment
  MultiAZ:
    Type: String
    AllowedValues: ["true", "false"]
    Default: false
  VPCId:
    Description: AWS VPC ID
    Type: AWS::EC2::VPC::Id
  CidrPrefix:
    Type: String
    Default: '10.0.2'
  PrivateRouteTable:
    Type: String

  CloudFrontIdentityKey:
    Type: String
    Default: aws-cloudformation-cloudfront-identity/1.0.1.zip
  CognitoIdentityPoolKey:
    Type: String
    Default: aws-cloudformation-cognito-identitypool/1.0.0.zip
  CognitoIdentityPoolRolesKey:
    Type: String
    Default: aws-cloudformation-cognito-identitypoolroles/1.0.0.zip
  CognitoUserPoolKey:
    Type: String
    Default: aws-cloudformation-cognito-userpool/1.0.0.zip
  CognitoUserPoolClientKey:
    Type: String
    Default: aws-cloudformation-cognito-userpoolclient/1.0.1.zip
  CognitoUserPoolCustomAttributesKey:
    Type: String
    Default: aws-cloudformation-cognito-userpoolcustomattributes/1.0.1.zip
  DynamoDBItemKey:
    Type: String
    Default: aws-cloudformation-dynamodb-item/1.0.0.zip
  ElasticTranscoderPipelineKey:
    Type: String
    Default: aws-cloudformation-elastic-transcoder-pipeline/1.0.0.zip
  ElasticTranscoderPresetKey:
    Type: String
    Default: aws-cloudformation-elastic-transcoder-preset/1.0.0.zip
  S3UploaderKey:
    Type: String
    Default: aws-cloudformation-s3-uploader/1.1.0.zip
  PasswordGeneratorKey:
    Type: String
    Default: aws-cloudformation-password-generator/1.0.0.zip
  SQLRequestKey:
    Type: String
    Default: aws-cloudformation-sql-request/1.0.0.zip
  Route53HostedZoneDetailsKey:
    Type: String
    Default: aws-cloudformation-route53-hostedzone-details/1.0.0.zip

Mappings: {}

Conditions:
  UseMultiAZ: !Equals [!Ref MultiAZ, "true"]

Resources:

  ResourcesSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.0/25"
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select ['0', !GetAZs { Ref: "AWS::Region" }]
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo ResourcesSubnet1 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: resources

  ResourcesSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ResourcesSubnet1
      RouteTableId: !Ref PrivateRouteTable

  ResourcesSubnet2:
    Type: AWS::EC2::Subnet
    Condition: UseMultiAZ
    Properties:
      VpcId: !Ref VPCId
      CidrBlock: !Sub "${CidrPrefix}.128/25"
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone: !Select ['1', !GetAZs { Ref: "AWS::Region" }]
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo ResourcesSubnet2 (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: resources

  ResourcesSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref ResourcesSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ResourcesNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatano ResourcesNetworkAcl (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: resources

  InboundResourcesNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ResourcesNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  OutboundResourcesNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref ResourcesNetworkAcl
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535

  ResourcesSubnet1NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref ResourcesSubnet1
      NetworkAclId: !Ref ResourcesNetworkAcl

  ResourcesSubnet2NetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: UseMultiAZ
    Properties:
      SubnetId: !Ref ResourcesSubnet2
      NetworkAclId: !Ref ResourcesNetworkAcl

  ResourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambdas Resources SecurityGroup
      VpcId: !Ref VPCId
      Tags:
        - Key: Name
          Value: !Sub "Chatanoo ResourceSecurityGroup (${ProjectName})"
        - Key: chatanoo:project
          Value: !Ref ProjectName
        - Key: chatanoo:component
          Value: resources

  CloudFrontIdentityRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cloudfront:*
                  - iam:PassRole
                Resource:
                  - "*"

  CloudFrontIdentityFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CloudFrontIdentity Custom Resource"
      Handler: index.handler
      Role: !GetAtt CloudFrontIdentityRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CloudFrontIdentityKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  CognitoIdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cognito-identity:*
                  - iam:PassRole
                Resource:
                  - "*"

  CognitoIdentityPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CognitoIdentityPool Custom Resource"
      Handler: index.handler
      Role: !GetAtt CognitoIdentityPoolRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CognitoIdentityPoolKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  CognitoIdentityPoolRolesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - cognito-identity:*
                - iam:PassRole
              Resource:
                - "*"

  CognitoIdentityPoolRolesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CognitoIdentityPoolRoles Custom Resource"
      Handler: index.handler
      Role: !GetAtt CognitoIdentityPoolRolesRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CognitoIdentityPoolRolesKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  CognitoUserPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - iam:PassRole
                Resource:
                  - "*"

  CognitoUserPoolFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CognitoUserPool Custom Resource"
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CognitoUserPoolKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  CognitoUserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - iam:PassRole
                Resource:
                  - "*"

  CognitoUserPoolClientFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CognitoUserPoolClient Custom Resource"
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolClientRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CognitoUserPoolClientKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  CognitoUserPoolCustomAttributesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - cognito-idp:*
                  - iam:PassRole
                Resource:
                  - "*"

  CognitoUserPoolCustomAttributesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) CognitoUserPoolCustomAttributes Custom Resource"
      Handler: index.handler
      Role: !GetAtt CognitoUserPoolCustomAttributesRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref CognitoUserPoolCustomAttributesKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  DynamoDBItemRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - iam:PassRole
                Resource:
                  - "*"

  DynamoDBItemFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) DynamoDBItem Custom Resource"
      Handler: index.handler
      Role: !GetAtt DynamoDBItemRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref DynamoDBItemKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  ElasticTranscoderPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - elastictranscoder:*
                - iam:PassRole
              Resource:
                - "*"

  ElasticTranscoderPipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) ElasticTranscoderPipeline Custom Resource"
      Handler: index.handler
      Role: !GetAtt ElasticTranscoderPipelineRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref ElasticTranscoderPipelineKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  ElasticTranscoderPresetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - elastictranscoder:*
                - iam:PassRole
              Resource:
                - "*"

  ElasticTranscoderPresetFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) ElasticTranscoderPreset Custom Resource"
      Handler: index.handler
      Role: !GetAtt ElasticTranscoderPresetRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref ElasticTranscoderPresetKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  S3UploaderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:*
                  - iam:PassRole
                Resource:
                  - "*"

  S3UploaderFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) S3Uploader Custom Resource"
      Handler: index.handler
      Role: !GetAtt S3UploaderRole.Arn
      MemorySize: 1024
      Timeout: 300
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref S3UploaderKey
      Runtime: nodejs
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  PasswordGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - "*"

  PasswordGeneratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) PasswordGenerator Custom Resource"
      Handler: index.handler
      Role: !GetAtt PasswordGeneratorRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref PasswordGeneratorKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

  SQLRequestRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - s3:GetObject
                Resource:
                  - "*"

  SQLRequestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) SQLRequest Custom Resource"
      Handler: index.handler
      Role: !GetAtt SQLRequestRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref SQLRequestKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1


  Route53HostedZoneDetailsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - route53:GetHostedZone
                Resource:
                  - "*"

  Route53HostedZoneDetailsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: !Sub "(${ProjectName}) Route53HostedZoneDetails Custom Resource"
      Handler: index.handler
      Role: !GetAtt Route53HostedZoneDetailsRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: !Ref Route53HostedZoneDetailsKey
      Runtime: nodejs
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref ResourceSecurityGroup
        SubnetIds: !If
          - UseMultiAZ
          - - !Ref ResourcesSubnet1
            - !Ref ResourcesSubnet2
          - - !Ref ResourcesSubnet1

Outputs:
  ResourceSecurityGroup:
    Value: !Ref ResourceSecurityGroup
  CloudFrontIdentity:
    Value: !Ref CloudFrontIdentityFunction
  CognitoIdentityPool:
    Value: !Ref CognitoIdentityPoolFunction
  CognitoIdentityPoolRoles:
    Value: !Ref CognitoIdentityPoolRolesFunction
  CognitoUserPool:
    Value: !Ref CognitoUserPoolFunction
  CognitoUserPoolClient:
    Value: !Ref CognitoUserPoolClientFunction
  CognitoUserPoolCustomAttributes:
    Value: !Ref CognitoUserPoolCustomAttributesFunction
  DynamoDBItem:
    Value: !Ref DynamoDBItemFunction
  ElasticTranscoderPipeline:
    Value: !Ref ElasticTranscoderPipelineFunction
  ElasticTranscoderPreset:
    Value: !Ref ElasticTranscoderPresetFunction
  S3Uploader:
    Value: !Ref S3UploaderFunction
  PasswordGenerator:
    Value: !Ref PasswordGeneratorFunction
  SQLRequest:
    Value: !Ref SQLRequestFunction
  Route53HostedZoneDetails:
    Value: !Ref Route53HostedZoneDetailsFunction
